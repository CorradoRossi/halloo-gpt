import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRef, useState } from "react";
import { Toaster, toast } from "react-hot-toast";
import DropDown, { VibeType } from "../components/DropDown";
import Footer from "../components/Footer";
import Github from "../components/GitHub";
import Header from "../components/Header";
import LoadingDots from "../components/LoadingDots";
import TweetDropDown from "../components/TweetDropDown";

const Home: NextPage = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [handle, setHandle] = useState<string>("");
  const [vibe, setVibe] = useState<VibeType>("Funny");
  const [generatedTweet, setGeneratedTweet] = useState<string>("");
  const contextRef = useRef<HTMLDivElement>(null);
  const [contact, setContact] = useState<string>("Tweet");
  const [userData, setUserData] = useState<any>(null);
  const [addendum, setAddendum] = useState<string>(
    " generated by Halloo https://halloo.dev"
  );

  const generateDataUser = async (handle: string): Promise<any> => {
    let username = handle;
    if (handle.slice(0, 1) === "@") {
      username = handle.slice(1);
    }
    // get the base url
    const baseUrl = window.location.origin;
    const url = baseUrl + `/api/tweets?username=${username}`;
    const response = await fetch(url);
    if (!response.ok) {
      // output that such user is not found
      throw new Error(response.statusText);
    }
    const data = await response.json();
    console.log(data);
    setUserData(data);
    return data;
  };

  const generatePrompt = async (handle: string, vibe: VibeType) => {
    setAddendum(" generated by Halloo https://halloo.dev");
    const prompt = `I am going to show you a collection of recent tweets written by ${handle}. I want you to use the information from these tweets to craft a personalized greeting for them from the sender. Make sure the greeting has a ${vibe} vibe and ${vibe} tone. Make sure it is in the form of a ${contact}. Keep the greeting to roughly 240 characters. Do not use hashtags. Here are the tweets to base your message on: ${userData}`;
    return prompt;
  };

  const scrollToBios = () => {
    if (contextRef.current !== null) {
      contextRef.current.scrollIntoView({ behavior: "smooth" });
    }
  };

  const generateHalloo = async (
    e: React.MouseEvent<HTMLButtonElement>,
    prompt: string
  ) => {
    e.preventDefault();
    setGeneratedTweet("");
    setLoading(true);
    const response = await fetch("/api/generate", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt }),
    });
    if (!response.ok) {
      throw new Error(response.statusText);
    }
    const data = response.body;
    if (!data) {
      return;
    }
    // Create a new TextDecoder to decode the chunks
    const decoder = new TextDecoder();
    let result = "";
    // Get the reader from the readableStream
    const reader = data.getReader();
    // Read and concatenate chunks until done
    while (true) {
      const { value, done } = await reader.read();

      if (done) {
        // If the stream is done, break the loop
        break;
      } else {
        // Otherwise, decode and concatenate the chunk
        result += decoder.decode(value, { stream: true });
      }
    }
    // Decode any remaining data and close the stream
    result += decoder.decode();
    console.log(result);
    // Return the concatenated result
    setGeneratedTweet(result);
    scrollToBios();
    setLoading(false);
    return result;
  };

  return (
    <div className="flex max-w-5xl mx-auto flex-col items-center justify-center py-2 min-h-screen">
      <Head>
        <title>Halloo GPT</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main className="flex flex-1 w-full flex-col items-center justify-center text-center px-4 mt-12 sm:mt-6">
        <a
          className="flex max-w-fit items-center justify-center space-x-2 rounded-full border border-gray-300 bg-white px-4 py-2 text-sm text-gray-600 shadow-md transition-colors hover:bg-gray-100 mb-5"
          href="https://github.com/CorradoRossi/halloo-gpt"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Github />
          <p>View on GitHub</p>
        </a>
        <h1 className="sm:text-4xl text-2xl max-w-[708px] font-bold text-slate-900">
          Want to make an impression? Enter a Twitter handle and get a
          distinctive tweetable greeting via AI wizardry.
        </h1>
        <div className="max-w-xl w-full">
          <div className="flex mt-10 items-center space-x-3">
            <Image
              src="/1-black.png"
              width={30}
              height={30}
              alt="1 icon"
              className="mb-5 sm:mb-0"
            />
            <p className="text-left font-medium">
              Type the twitter handle <span className="text-slate-500"></span>.
            </p>
          </div>
          <textarea
            value={handle}
            onChange={(e) => setHandle(e.target.value)}
            rows={1}
            className="w-full rounded-md border-gray-300 shadow-sm focus:border-black focus:ring-black my-5"
            placeholder={"pick a twitter handle (e.g. @elonmusk)"}
          />
          <div className="flex mb-5 items-center space-x-3">
            <Image src="/2-black.png" width={30} height={30} alt="1 icon" />
            <p className="text-left font-medium">Tweet or direct message ?</p>
          </div>
          <div className="block">
            <TweetDropDown
              contact={contact}
              setContact={(contact) => setContact(contact)}
            />
          </div>
          <div className="flex mt-10  mb-5 items-center space-x-3">
            <Image src="/3_blacksm.png" width={30} height={30} alt="1 icon" />
            <p className="text-left font-medium">Vibe ?</p>
          </div>
          <div className="block">
            <DropDown vibe={vibe} setVibe={(newVibe) => setVibe(newVibe)} />
          </div>

          {!loading && (
            <button
              className="bg-black rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-full"
              onClick={async (e) => {
                generateDataUser(handle),
                  generateHalloo(e, await generatePrompt(handle, vibe));
              }}
            >
              Generate your halloo &rarr;
            </button>
          )}
          {loading && (
            <button
              className="bg-black rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-full"
              disabled
            >
              <LoadingDots color="white" style="large" />
            </button>
          )}
        </div>
        <Toaster
          position="top-center"
          reverseOrder={false}
          toastOptions={{ duration: 2000 }}
        />
        <hr className="shadow-sm h-px bg-gray-700 border-1 dark:bg-gray-700" />
        <div className="space-y-10 my-10">
          {generatedTweet && (
            <>
              <div>
                <h2
                  className="sm:text-4xl text-3xl font-bold text-slate-900 mx-auto"
                  ref={contextRef}
                >
                  Your generated halloo
                </h2>
              </div>
              <div className="space-y-8 flex flex-col items-center justify-center max-w-xl mx-auto">
                <div
                  className="bg-gray-100 rounded-xl shadow-lg p-4 hover:bg-gray-200 transition cursor-copy border"
                  onClick={() => {
                    navigator.clipboard.writeText(generatedTweet);
                    toast("Tweet generated", {
                      icon: "👍",
                    });
                  }}
                  key={generatedTweet}
                >
                  <p>{generatedTweet}</p>
                </div>
              </div>
              {contact === "Tweet" && (
                <div className="flex flex-col items-center justify-center">
                  <a
                    href={`https://twitter.com/intent/tweet?text=${
                      generatedTweet + "%0a" + "%0a" + addendum
                    }`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="bg-twitter shadow-sm rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-full"
                  >
                    Tweet it &rarr;
                  </a>
                </div>
              )}
              {contact === "Personal Message" && (
                <div className="flex flex-col items-center justify-center">
                  <a
                    href={`https://twitter.com/messages/compose?username=${handle}&text=${
                      generatedTweet + "%0a" + "%0a" + addendum
                    }`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="bg-twitter shadow-sm rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-full"
                  >
                    Send direct message &rarr;
                  </a>
                </div>
              )}
            </>
          )}
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default Home;
