import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRef, useState } from "react";
import { Toaster, toast } from "react-hot-toast";
import DropDown, { VibeType } from "../components/DropDown";
import Footer from "../components/Footer";
import Github from "../components/GitHub";
import Header from "../components/Header";
import LoadingDots from "../components/LoadingDots";
import DropDownV2 from "../components/DropDownV2";

const Home: NextPage = () => {
  const [loading, setLoading] = useState<boolean>(false);
  const [handle, setHandle] = useState<string>("");
  const [vibe, setVibe] = useState<VibeType>("Funny");
  const [generatedTweet, setGeneratedTweet] = useState<string>("");
  const contextRef = useRef<HTMLDivElement>(null);
  const [contact, setContact] = useState<string>("Tweet");

  const generateDataUser = async (handle: string): Promise<any> => {
    let username = handle;
    if (handle.slice(0, 1) === "@") {
      username = handle.slice(1);
    }
    // get the base url
    const baseUrl = window.location.origin;
    const url = baseUrl + `/api/tweets?username=${username}`;
    const response = await fetch(url);
    if (!response.ok) {
      // output that such user is not found
      throw new Error(response.statusText);
    }
    const data = await response.json();
    console.log(data);
    return data;
  };

  const generatePrompt = async (handle: string, vibe: VibeType) => {
    // const prompt = `Generate 1 ${vibe} a message to break the ice   to the user with this  handle :${handle} knowing that this user is a ${vibe} person and that this is all the data and context you have about this user: ${generateDataUser(handle)}`;
    const userData = await generateDataUser(handle);
    // const prompt = `Based on this data  :${userData} that include tweets and replies on this person .as a future friend pick one thing this person is intrested in order to find a way to break the ice through
    //  a generated directed ${contact} at him with no hashtags  : ${handle}  that would get him interested back in you  and make it ${vibe} ` ;
    const prompt = ` 
  Before reaching out to this person, take a look at their interests and recent activity on social media based on this data (${userData}) then 
    Choose only 1 topic that stands out to you and craft a personalized ${contact} to will be shared and  directed at (${handle}) without exceeding the  100-character limit . Avoid using hashtags and instead focus on creating a genuine
 connection through a ${vibe} vibe return only a ${contact} that is ${vibe} and that is directed at this person : ${handle} and at the end mention that this tweet was generated by + " generated  hallooGPT https://halloogpt.vercel.app and recommend your friends to try it too make sure to write the link" 
    Please no explication of how this was generated and no hashtags and no mention of the ai just make it look like a normal person who is trying to get to know this person and build a relationship with them
  `;

    // const prompt = `Generate  a ${vibe}  message to break the ice
    // souly based on this data as context try to find the best thing you can open up to this person to get him to engage with you ${generateDataUser(
    //   handle
    //   )}
    //   Make sure each message with no hashtags,and direct them to this person: ${handle}${
    //     handle.slice(-1) === "." ? "" : "."
    //   } and don't ever mention you are an ai prentend that you are a person who is trying to get to know this person and build a relationship with them
    //   ${
    //   vibe === "Funny"
    //     ? `Make  a joke soulfully based on the data you have about this person : ${generateDataUser(`
    //     : null
    //   }
    //   `;
    return prompt;
  };

  const scrollToBios = () => {
    if (contextRef.current !== null) {
      contextRef.current.scrollIntoView({ behavior: "smooth" });
    }
  };

  // const prompt = `Generate 1 ${vibe} a message to break the ice     ${
  //   vibe === "Funny"
  //     ? "Make sure there is a joke in there and it's a little ridiculous."
  //     : null
  // }
  // Make sure each message, has short sentences that are found in Twitter, and direct them to this person: ${handle}${
  //   handle.slice(-1) === "." ? "" : "."
  // } using this data as context to start a conversation or build some report with them: ${generateDataUser(
  //   handle
  // )}`;
  // const generateHalloo = async (e: React.MouseEvent<HTMLButtonElement>) => {
  //   e.preventDefault();
  //   setGeneratedTweet("");
  //   setLoading(true);
  //   const response = await fetch("/api/generate", {
  //     method: "POST",
  //     headers: {
  //       "Content-Type": "application/json",
  //     },
  //     body: JSON.stringify({
  //       prompt,
  //     }),
  //   });
  //   if (!response.ok) {
  //     throw new Error(response.statusText);
  //   }
  //   const data = await response.json();
  //   setGeneratedTweet(data.generated_text);
  //   scrollToBios();
  //   setLoading(false);
  // };

  const generateHalloo = async (
    e: React.MouseEvent<HTMLButtonElement>,
    prompt: string
  ) => {
    e.preventDefault();
    setGeneratedTweet("");
    setLoading(true);
    const response = await fetch("/api/generate", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        prompt,
      }),
    });
    if (!response.ok) {
      throw new Error(response.statusText);
    }
    const data = response.body;
    if (!data) {
      return;
    }
    const reader = data.getReader();
    const decoder = new TextDecoder();
    let done = false;

    while (!done) {
      const { value, done: doneReading } = await reader.read();
      done = doneReading;
      const chunkValue = decoder.decode(value);
      console.log("reading", chunkValue);
      setGeneratedTweet((prev) => prev + chunkValue);
    }
    scrollToBios();
    setLoading(false);
  };

  return (
    <div className="flex max-w-5xl mx-auto flex-col items-center justify-center py-2 min-h-screen">
      <Head>
        <title>Twitter Halloo GPT</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main className="flex flex-1 w-full flex-col items-center justify-center text-center px-4 mt-12 sm:mt-20">
        {/*<a
          className="flex max-w-fit items-center justify-center space-x-2 rounded-full border border-gray-300 bg-white px-4 py-2 text-sm text-gray-600 shadow-md transition-colors hover:bg-gray-100 mb-5"
          href="https://github.com/vulture990/HallooGPT"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Github />
          <p>Star on GitHub</p>
        </a>*/}
        <h1 className="sm:text-4xl text-2xl max-w-[708px] font-bold text-slate-900">
          Wanna make an impression? Enter someone's Twitter handle and let
          wizardry do the rest.
        </h1>
        <div className="max-w-xl w-full">
          <div className="flex mt-10 items-center space-x-3">
            <Image
              src="/1-black.png"
              width={30}
              height={30}
              alt="1 icon"
              className="mb-5 sm:mb-0"
            />
            <p className="text-left font-medium">
              Type the twitter handle <span className="text-slate-500"></span>.
            </p>
          </div>
          <textarea
            value={handle}
            onChange={(e) => setHandle(e.target.value)}
            rows={1}
            className="w-full rounded-md border-gray-300 shadow-sm focus:border-black focus:ring-black my-5"
            placeholder={
              "pick a friend's twitter handle and type it here (e.g. @elonmusk)"
            }
          />
          <div className="flex mb-5 items-center space-x-3">
            <Image src="/2-black.png" width={30} height={30} alt="1 icon" />
            <p className="text-left font-medium">Tweet or message ?</p>
          </div>
          <div className="block">
            <DropDownV2
              contact={contact}
              setContact={(contact) => setContact(contact)}
            />
          </div>
          <div className="flex mt-10  mb-5 items-center space-x-3">
            <Image src="/3_blacksm.png" width={30} height={30} alt="1 icon" />
            <p className="text-left font-medium">Vibe ?</p>
          </div>
          <div className="block">
            <DropDown vibe={vibe} setVibe={(newVibe) => setVibe(newVibe)} />
          </div>

          {!loading && (
            <button
              className="bg-black rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-full"
              onClick={async (e) =>
                generateHalloo(e, await generatePrompt(handle, vibe))
              }
            >
              Generate your halloo &rarr;
            </button>
          )}
          {loading && (
            <button
              className="bg-black rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-full"
              disabled
            >
              <LoadingDots color="white" style="large" />
            </button>
          )}
        </div>
        <Toaster
          position="top-center"
          reverseOrder={false}
          toastOptions={{ duration: 2000 }}
        />
        <hr className="h-px bg-gray-700 border-1 dark:bg-gray-700" />
        <div className="space-y-10 my-10">
          {generatedTweet && (
            <>
              <div>
                <h2
                  className="sm:text-4xl text-3xl font-bold text-slate-900 mx-auto"
                  ref={contextRef}
                >
                  Your generated halloo
                </h2>
              </div>
              <div className="space-y-8 flex flex-col items-center justify-center max-w-xl mx-auto">
                {generatedTweet
                  .substring(generatedTweet.indexOf("1") + 3)
                  .split("2.")
                  .map((generatedTweet) => {
                    return (
                      <div
                        className="bg-white rounded-xl shadow-md p-4 hover:bg-gray-100 transition cursor-copy border"
                        onClick={() => {
                          navigator.clipboard.writeText(generatedTweet);
                          toast("Tweet generated", {
                            icon: "👍",
                          });
                        }}
                        key={generatedTweet}
                      >
                        <p>{generatedTweet}</p>
                      </div>
                    );
                  })}
              </div>
              {/* if contact is tweet i want to add a tweet button to make the user tweet it  i also want to say that the tweet is generated throught the app hallooGPT */}
              {contact === "Tweet" && (
                <div className="flex flex-col items-center justify-center">
                  <a
                    href={`https://twitter.com/intent/tweet?text=${generatedTweet}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="bg-black rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-full"
                  >
                    Halloo it &rarr;
                  </a>
                </div>
              )}

              {/* {contact === "Tweet" && (
                <div className="flex flex-col items-center justify-center">
                  <a
                    href={`https://twitter.com/intent/tweet?text=${generatedTweet}`}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="bg-black rounded-xl text-white font-medium px-4 py-2 sm:mt-10 mt-8 hover:bg-black/80 w-full"
                  >
                    Tweet it &rarr;
                  </a>
                </div>
              )} */}
            </>
          )}
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default Home;
